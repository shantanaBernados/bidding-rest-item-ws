<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Uncomment and your base-package here: <context:component-scan base-package="org.springframework.samples.web"/> -->


	<!-- <context:component-scan base-package="vn.com.fsoft.*" /> is telling 
		spring that it should search the class path for all the classes under vn.com.fsoft.* 
		and look at each class to see if it has a @Controller, or @Repository, or 
		@Service, or @Component and if it does then Spring will register the class 
		with the bean factory as if you had typed <bean class="..." /> in the xml 
		configuration files. -->
	<context:component-scan base-package="vn.com.fsoft.bidding.restful" />

	<!-- <annotation-driven /> means that you can define spring beans dependencies 
		without actually having to specify a bunch of elements in xml or implement 
		an interface or extend a base class. See -> http://docs.spring.io/spring/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-config -->

	<mvc:annotation-driven />

	<!-- Style 1 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		p:location="/WEB-INF/jdbc.properties" />

	<!-- Style 2 -->
	<!-- <context:property-placeholder location="/WEB-INF/*.properties"/> -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.databaseurl}" p:username="${jdbc.username}" p:password="${jdbc.password}" />

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation">
			<value>classpath:hibernate.cfg.xml</value>
		</property>
		<property name="configurationClass">
			<value>org.hibernate.cfg.AnnotationConfiguration</value>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${jdbc.dialect}</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>
	
	<tx:annotation-driven />
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="itemDAO" class="vn.com.fsoft.bidding.itemws.persistence.ItemDAOImpl"></bean>
	<bean id="itemManager" class="vn.com.fsoft.bidding.itemws.service.ItemManagerImpl"></bean>
	<bean id="accountDAO" class="vn.com.fsoft.bidding.itemws.persistence.AccountDAOImpl"></bean>
	<bean id="accountManager" class="vn.com.fsoft.bidding.itemws.service.AccountManagerImpl"></bean>

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- Example: a logical view name of 'showMessage' is mapped to '/WEB-INF/jsp/showMessage.jsp' -->
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- Configure plugin JSON as request and response in method handler -->
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jsonMessageConverter" />
			</list>
		</property>
	</bean>

	<!-- Configure bean to convert JSON to POJO and vice versa -->
	<bean id="jsonMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	</bean>

</beans>
